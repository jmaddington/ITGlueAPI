# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from itglue import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from itglue import schemas  # noqa: F401

from itglue.model.organization import Organization

from . import path

# Query params


class FilterSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            name = schemas.StrSchema
            organization_type_id = schemas.NumberSchema
            organization_status_id = schemas.NumberSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            my_glue_account_id = schemas.NumberSchema
            psa_id = schemas.StrSchema
            
            
            class psa_integration_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "manage": "MANAGE",
                        "autotask": "AUTOTASK",
                        "tigerpaw": "TIGERPAW",
                        "kaseya-bms": "KASEYABMS",
                        "pulseway-psa": "PULSEWAYPSA",
                        "vorex": "VOREX",
                    }
                
                @schemas.classproperty
                def MANAGE(cls):
                    return cls("manage")
                
                @schemas.classproperty
                def AUTOTASK(cls):
                    return cls("autotask")
                
                @schemas.classproperty
                def TIGERPAW(cls):
                    return cls("tigerpaw")
                
                @schemas.classproperty
                def KASEYABMS(cls):
                    return cls("kaseya-bms")
                
                @schemas.classproperty
                def PULSEWAYPSA(cls):
                    return cls("pulseway-psa")
                
                @schemas.classproperty
                def VOREX(cls):
                    return cls("vorex")
            group_id = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "organization_type_id": organization_type_id,
                "organization_status_id": organization_status_id,
                "created_at": created_at,
                "updated_at": updated_at,
                "my_glue_account_id": my_glue_account_id,
                "psa_id": psa_id,
                "psa_integration_type": psa_integration_type,
                "group_id": group_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_type_id"]) -> MetaOapg.properties.organization_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_status_id"]) -> MetaOapg.properties.organization_status_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["my_glue_account_id"]) -> MetaOapg.properties.my_glue_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["psa_id"]) -> MetaOapg.properties.psa_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["psa_integration_type"]) -> MetaOapg.properties.psa_integration_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization_type_id", "organization_status_id", "created_at", "updated_at", "my_glue_account_id", "psa_id", "psa_integration_type", "group_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_type_id"]) -> typing.Union[MetaOapg.properties.organization_type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_status_id"]) -> typing.Union[MetaOapg.properties.organization_status_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["my_glue_account_id"]) -> typing.Union[MetaOapg.properties.my_glue_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["psa_id"]) -> typing.Union[MetaOapg.properties.psa_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["psa_integration_type"]) -> typing.Union[MetaOapg.properties.psa_integration_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization_type_id", "organization_status_id", "created_at", "updated_at", "my_glue_account_id", "psa_id", "psa_integration_type", "group_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        organization_type_id: typing.Union[MetaOapg.properties.organization_type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        organization_status_id: typing.Union[MetaOapg.properties.organization_status_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        my_glue_account_id: typing.Union[MetaOapg.properties.my_glue_account_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        psa_id: typing.Union[MetaOapg.properties.psa_id, str, schemas.Unset] = schemas.unset,
        psa_integration_type: typing.Union[MetaOapg.properties.psa_integration_type, str, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilterSchema':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            organization_type_id=organization_type_id,
            organization_status_id=organization_status_id,
            created_at=created_at,
            updated_at=updated_at,
            my_glue_account_id=my_glue_account_id,
            psa_id=psa_id,
            psa_integration_type=psa_integration_type,
            group_id=group_id,
            _configuration=_configuration,
            **kwargs,
        )


class FilterExcludeSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            name = schemas.StrSchema
            organization_type_id = schemas.NumberSchema
            organization_status_id = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "organization_type_id": organization_type_id,
                "organization_status_id": organization_status_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_type_id"]) -> MetaOapg.properties.organization_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_status_id"]) -> MetaOapg.properties.organization_status_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization_type_id", "organization_status_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_type_id"]) -> typing.Union[MetaOapg.properties.organization_type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_status_id"]) -> typing.Union[MetaOapg.properties.organization_status_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization_type_id", "organization_status_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        organization_type_id: typing.Union[MetaOapg.properties.organization_type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        organization_status_id: typing.Union[MetaOapg.properties.organization_status_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilterExcludeSchema':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            organization_type_id=organization_type_id,
            organization_status_id=organization_status_id,
            _configuration=_configuration,
            **kwargs,
        )


class FilterRangeSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            my_glue_account_id = schemas.NumberSchema
            __annotations__ = {
                "my_glue_account_id": my_glue_account_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["my_glue_account_id"]) -> MetaOapg.properties.my_glue_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["my_glue_account_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["my_glue_account_id"]) -> typing.Union[MetaOapg.properties.my_glue_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["my_glue_account_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        my_glue_account_id: typing.Union[MetaOapg.properties.my_glue_account_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilterRangeSchema':
        return super().__new__(
            cls,
            *_args,
            my_glue_account_id=my_glue_account_id,
            _configuration=_configuration,
            **kwargs,
        )


class SortSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "name": "NAME",
            "id": "ID",
            "updated_at": "UPDATED_AT",
            "organization_status_name": "ORGANIZATION_STATUS_NAME",
            "organization_type_name": "ORGANIZATION_TYPE_NAME",
            "created_at": "CREATED_AT",
            "short_name": "SHORT_NAME",
            "my_glue_account_id": "MY_GLUE_ACCOUNT_ID",
        }
    
    @schemas.classproperty
    def NAME(cls):
        return cls("name")
    
    @schemas.classproperty
    def ID(cls):
        return cls("id")
    
    @schemas.classproperty
    def UPDATED_AT(cls):
        return cls("updated_at")
    
    @schemas.classproperty
    def ORGANIZATION_STATUS_NAME(cls):
        return cls("organization_status_name")
    
    @schemas.classproperty
    def ORGANIZATION_TYPE_NAME(cls):
        return cls("organization_type_name")
    
    @schemas.classproperty
    def CREATED_AT(cls):
        return cls("created_at")
    
    @schemas.classproperty
    def SHORT_NAME(cls):
        return cls("short_name")
    
    @schemas.classproperty
    def MY_GLUE_ACCOUNT_ID(cls):
        return cls("my_glue_account_id")


class PageSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            number = schemas.NumberSchema
            size = schemas.NumberSchema
            __annotations__ = {
                "number": number,
                "size": size,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["number", "size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["number", "size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PageSchema':
        return super().__new__(
            cls,
            *_args,
            number=number,
            size=size,
            _configuration=_configuration,
            **kwargs,
        )


class IncludeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "adapters_resources": "ADAPTERS_RESOURCES",
            "attachments": "ATTACHMENTS",
        }
    
    @schemas.classproperty
    def ADAPTERS_RESOURCES(cls):
        return cls("adapters_resources")
    
    @schemas.classproperty
    def ATTACHMENTS(cls):
        return cls("attachments")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'filter': typing.Union[FilterSchema, dict, frozendict.frozendict, ],
        'filter[exclude]': typing.Union[FilterExcludeSchema, dict, frozendict.frozendict, ],
        'filter[range]': typing.Union[FilterRangeSchema, dict, frozendict.frozendict, ],
        'sort': typing.Union[SortSchema, str, ],
        'page': typing.Union[PageSchema, dict, frozendict.frozendict, ],
        'include': typing.Union[IncludeSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_filter = api_client.QueryParameter(
    name="filter",
    style=api_client.ParameterStyle.FORM,
    schema=FilterSchema,
    explode=True,
)
request_query_filter_exclude = api_client.QueryParameter(
    name="filter[exclude]",
    style=api_client.ParameterStyle.FORM,
    schema=FilterExcludeSchema,
    explode=True,
)
request_query_filter_range = api_client.QueryParameter(
    name="filter[range]",
    style=api_client.ParameterStyle.FORM,
    schema=FilterRangeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_include = api_client.QueryParameter(
    name="include",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationVndApijsonCharsetutf8 = Organization


request_body_organization = api_client.RequestBody(
    content={
        'application/vnd.api+json; charset=utf-8': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationVndApijsonCharsetutf8),
    },
)
_auth = [
    'ApiKeyAuth',
]
SchemaFor200ResponseBodyApplicationVndApijsonCharsetutf8 = Organization


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationVndApijsonCharsetutf8,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/vnd.api+json; charset=utf-8': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndApijsonCharsetutf8),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/vnd.api+json; charset=utf-8',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _index_organizations_oapg(
        self,
        content_type: typing_extensions.Literal["application/vnd.api+json; charset=utf-8"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _index_organizations_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _index_organizations_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _index_organizations_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _index_organizations_oapg(
        self,
        content_type: str = 'application/vnd.api+json; charset=utf-8',
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Returns a list of organizations in your account.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_filter,
            request_query_filter_exclude,
            request_query_filter_range,
            request_query_sort,
            request_query_page,
            request_query_include,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_organization.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class IndexOrganizations(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def index_organizations(
        self,
        content_type: typing_extensions.Literal["application/vnd.api+json; charset=utf-8"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def index_organizations(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def index_organizations(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def index_organizations(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def index_organizations(
        self,
        content_type: str = 'application/vnd.api+json; charset=utf-8',
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._index_organizations_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        content_type: typing_extensions.Literal["application/vnd.api+json; charset=utf-8"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        content_type: str = 'application/vnd.api+json; charset=utf-8',
        body: typing.Union[SchemaForRequestBodyApplicationVndApijsonCharsetutf8, schemas.Unset] = schemas.unset,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._index_organizations_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


