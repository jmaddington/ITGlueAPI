# coding: utf-8

"""
    IT Glue API in OpenAPI Spec

    This is the IT Glue API implemented in OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io).  Some useful links: - [Reference](https://api.itglue.com/developer/)  # noqa: E501

    The version of the OpenAPI document: 0.0.01
    Contact: jonathan.addington@jmaddington.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from itglue import schemas  # noqa: F401


class Organization(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
            
            
            class attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        name = schemas.StrSchema
                        alert = schemas.StrSchema
                        description = schemas.StrSchema
                        organization_type_id = schemas.Int32Schema
                        organization_type_name = schemas.StrSchema
                        organization_status_id = schemas.Int32Schema
                        organization_status_name = schemas.StrSchema
                        primary = schemas.BoolSchema
                        logo = schemas.StrSchema
                        quick_notes = schemas.StrSchema
                        short_name = schemas.StrSchema
                        created_at = schemas.DateTimeSchema
                        updated_at = schemas.DateTimeSchema
                        __annotations__ = {
                            "name": name,
                            "alert": alert,
                            "description": description,
                            "organization-type-id": organization_type_id,
                            "organization-type-name": organization_type_name,
                            "organization-status-id": organization_status_id,
                            "organization-status-name": organization_status_name,
                            "primary": primary,
                            "logo": logo,
                            "quick-notes": quick_notes,
                            "short-name": short_name,
                            "created-at": created_at,
                            "updated-at": updated_at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["alert"]) -> MetaOapg.properties.alert: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["organization-type-id"]) -> MetaOapg.properties.organization_type_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["organization-type-name"]) -> MetaOapg.properties.organization_type_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["organization-status-id"]) -> MetaOapg.properties.organization_status_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["organization-status-name"]) -> MetaOapg.properties.organization_status_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["quick-notes"]) -> MetaOapg.properties.quick_notes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["short-name"]) -> MetaOapg.properties.short_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created-at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["updated-at"]) -> MetaOapg.properties.updated_at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "alert", "description", "organization-type-id", "organization-type-name", "organization-status-id", "organization-status-name", "primary", "logo", "quick-notes", "short-name", "created-at", "updated-at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["alert"]) -> typing.Union[MetaOapg.properties.alert, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["organization-type-id"]) -> typing.Union[MetaOapg.properties.organization_type_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["organization-type-name"]) -> typing.Union[MetaOapg.properties.organization_type_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["organization-status-id"]) -> typing.Union[MetaOapg.properties.organization_status_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["organization-status-name"]) -> typing.Union[MetaOapg.properties.organization_status_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["quick-notes"]) -> typing.Union[MetaOapg.properties.quick_notes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["short-name"]) -> typing.Union[MetaOapg.properties.short_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created-at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["updated-at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "alert", "description", "organization-type-id", "organization-type-name", "organization-status-id", "organization-status-name", "primary", "logo", "quick-notes", "short-name", "created-at", "updated-at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    alert: typing.Union[MetaOapg.properties.alert, str, schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
                    logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *_args,
                        name=name,
                        alert=alert,
                        description=description,
                        primary=primary,
                        logo=logo,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "attributes": attributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Organization':
        return super().__new__(
            cls,
            *_args,
            id=id,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )
